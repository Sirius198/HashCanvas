// tslint:disable
/**
 * Hashcanvas
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as globalImportUrl from 'url';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, BaseAPI, RequiredError } from './base';
/**
 * PasswordresetApi - axios parameter creator
 * @export
 */
export const PasswordresetApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {ForgotPasswordIN} forgotPasswordIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordresetForgot: async (forgotPasswordIN, options = {}) => {
            // verify required parameter 'forgotPasswordIN' is not null or undefined
            if (forgotPasswordIN === null || forgotPasswordIN === undefined) {
                throw new RequiredError('forgotPasswordIN', 'Required parameter forgotPasswordIN was null or undefined when calling postPasswordresetForgot.');
            }
            const localVarPath = `/passwordreset/forgot`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarQueryParameter = {};
            const localVarHeaderParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof forgotPasswordIN !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(forgotPasswordIN !== undefined ? forgotPasswordIN : {}) : (forgotPasswordIN || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {PasswordResetIN} passwordResetIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordresetReset: async (passwordResetIN, options = {}) => {
            // verify required parameter 'passwordResetIN' is not null or undefined
            if (passwordResetIN === null || passwordResetIN === undefined) {
                throw new RequiredError('passwordResetIN', 'Required parameter passwordResetIN was null or undefined when calling postPasswordresetReset.');
            }
            const localVarPath = `/passwordreset/reset`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof passwordResetIN !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(passwordResetIN !== undefined ? passwordResetIN : {}) : (passwordResetIN || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * PasswordresetApi - functional programming interface
 * @export
 */
export const PasswordresetApiFp = function (configuration) {
    return {
        /**
         *
         * @param {ForgotPasswordIN} forgotPasswordIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPasswordresetForgot(forgotPasswordIN, options) {
            const localVarAxiosArgs = await PasswordresetApiAxiosParamCreator(configuration).postPasswordresetForgot(forgotPasswordIN, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {PasswordResetIN} passwordResetIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postPasswordresetReset(passwordResetIN, options) {
            const localVarAxiosArgs = await PasswordresetApiAxiosParamCreator(configuration).postPasswordresetReset(passwordResetIN, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * PasswordresetApi - factory interface
 * @export
 */
export const PasswordresetApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {ForgotPasswordIN} forgotPasswordIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordresetForgot(forgotPasswordIN, options) {
            return PasswordresetApiFp(configuration).postPasswordresetForgot(forgotPasswordIN, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {PasswordResetIN} passwordResetIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postPasswordresetReset(passwordResetIN, options) {
            return PasswordresetApiFp(configuration).postPasswordresetReset(passwordResetIN, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * PasswordresetApi - object-oriented interface
 * @export
 * @class PasswordresetApi
 * @extends {BaseAPI}
 */
export class PasswordresetApi extends BaseAPI {
    /**
     *
     * @param {ForgotPasswordIN} forgotPasswordIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordresetApi
     */
    postPasswordresetForgot(forgotPasswordIN, options) {
        return PasswordresetApiFp(this.configuration).postPasswordresetForgot(forgotPasswordIN, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {PasswordResetIN} passwordResetIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PasswordresetApi
     */
    postPasswordresetReset(passwordResetIN, options) {
        return PasswordresetApiFp(this.configuration).postPasswordresetReset(passwordResetIN, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * ProvidersApi - axios parameter creator
 * @export
 */
export const ProvidersApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get list of coins generic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersCoinslist: async (options = {}) => {
            const localVarPath = `/providers/coinslist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersExhangelist: async (options = {}) => {
            const localVarPath = `/providers/exhangeList`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of providers coins generic
         * @param {string} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersProviderscoinslist: async (body, options = {}) => {
            // verify required parameter 'body' is not null or undefined
            if (body === null || body === undefined) {
                throw new RequiredError('body', 'Required parameter body was null or undefined when calling getProvidersProviderscoinslist.');
            }
            const localVarPath = `/providers/providerscoinslist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof body !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(body !== undefined ? body : {}) : (body || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersProviderslist: async (options = {}) => {
            const localVarPath = `/providers/providerslist`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * ProvidersApi - functional programming interface
 * @export
 */
export const ProvidersApiFp = function (configuration) {
    return {
        /**
         * Get list of coins generic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvidersCoinslist(options) {
            const localVarAxiosArgs = await ProvidersApiAxiosParamCreator(configuration).getProvidersCoinslist(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvidersExhangelist(options) {
            const localVarAxiosArgs = await ProvidersApiAxiosParamCreator(configuration).getProvidersExhangelist(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of providers coins generic
         * @param {string} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvidersProviderscoinslist(body, options) {
            const localVarAxiosArgs = await ProvidersApiAxiosParamCreator(configuration).getProvidersProviderscoinslist(body, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getProvidersProviderslist(options) {
            const localVarAxiosArgs = await ProvidersApiAxiosParamCreator(configuration).getProvidersProviderslist(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * ProvidersApi - factory interface
 * @export
 */
export const ProvidersApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get list of coins generic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersCoinslist(options) {
            return ProvidersApiFp(configuration).getProvidersCoinslist(options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of exchanges
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersExhangelist(options) {
            return ProvidersApiFp(configuration).getProvidersExhangelist(options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of providers coins generic
         * @param {string} body
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersProviderscoinslist(body, options) {
            return ProvidersApiFp(configuration).getProvidersProviderscoinslist(body, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of providers
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getProvidersProviderslist(options) {
            return ProvidersApiFp(configuration).getProvidersProviderslist(options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * ProvidersApi - object-oriented interface
 * @export
 * @class ProvidersApi
 * @extends {BaseAPI}
 */
export class ProvidersApi extends BaseAPI {
    /**
     * Get list of coins generic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    getProvidersCoinslist(options) {
        return ProvidersApiFp(this.configuration).getProvidersCoinslist(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of exchanges
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    getProvidersExhangelist(options) {
        return ProvidersApiFp(this.configuration).getProvidersExhangelist(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of providers coins generic
     * @param {string} body
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    getProvidersProviderscoinslist(body, options) {
        return ProvidersApiFp(this.configuration).getProvidersProviderscoinslist(body, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of providers
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProvidersApi
     */
    getProvidersProviderslist(options) {
        return ProvidersApiFp(this.configuration).getProvidersProviderslist(options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * StrategyApi - axios parameter creator
 * @export
 */
export const StrategyApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Get list of strategies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyListStrategy: async (options = {}) => {
            const localVarPath = `/strategy/list_strategy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of strategy symbols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyListSymbols: async (options = {}) => {
            const localVarPath = `/strategy/list_symbols`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of time frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyListTimeframe: async (options = {}) => {
            const localVarPath = `/strategy/list_timeframe`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Create a strategy. Define the name, must be unique. Add a description and the the url of the image
         * @param {StrategyIn} strategyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStrategyCreateStrategyAdmin: async (strategyIn, options = {}) => {
            // verify required parameter 'strategyIn' is not null or undefined
            if (strategyIn === null || strategyIn === undefined) {
                throw new RequiredError('strategyIn', 'Required parameter strategyIn was null or undefined when calling postStrategyCreateStrategyAdmin.');
            }
            const localVarPath = `/strategy/create_strategy_admin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof strategyIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(strategyIn !== undefined ? strategyIn : {}) : (strategyIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Strategy details
         * @param {StrategyDetailsIn} strategyDetailsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStrategyDetailStrategy: async (strategyDetailsIn, options = {}) => {
            // verify required parameter 'strategyDetailsIn' is not null or undefined
            if (strategyDetailsIn === null || strategyDetailsIn === undefined) {
                throw new RequiredError('strategyDetailsIn', 'Required parameter strategyDetailsIn was null or undefined when calling postStrategyDetailStrategy.');
            }
            const localVarPath = `/strategy/detail_strategy`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof strategyDetailsIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(strategyDetailsIn !== undefined ? strategyDetailsIn : {}) : (strategyDetailsIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get list of strategies by Customers. Admin tasks. Can see all strategies
         * @param {StrategyListCustomerIn} strategyListCustomerIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStrategyListStrategyByCustomer: async (strategyListCustomerIn, options = {}) => {
            // verify required parameter 'strategyListCustomerIn' is not null or undefined
            if (strategyListCustomerIn === null || strategyListCustomerIn === undefined) {
                throw new RequiredError('strategyListCustomerIn', 'Required parameter strategyListCustomerIn was null or undefined when calling postStrategyListStrategyByCustomer.');
            }
            const localVarPath = `/strategy/list_strategy_by_customer`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof strategyListCustomerIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(strategyListCustomerIn !== undefined ? strategyListCustomerIn : {}) : (strategyListCustomerIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * StrategyApi - functional programming interface
 * @export
 */
export const StrategyApiFp = function (configuration) {
    return {
        /**
         * Get list of strategies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStrategyListStrategy(options) {
            const localVarAxiosArgs = await StrategyApiAxiosParamCreator(configuration).getStrategyListStrategy(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of strategy symbols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStrategyListSymbols(options) {
            const localVarAxiosArgs = await StrategyApiAxiosParamCreator(configuration).getStrategyListSymbols(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of time frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getStrategyListTimeframe(options) {
            const localVarAxiosArgs = await StrategyApiAxiosParamCreator(configuration).getStrategyListTimeframe(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Create a strategy. Define the name, must be unique. Add a description and the the url of the image
         * @param {StrategyIn} strategyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStrategyCreateStrategyAdmin(strategyIn, options) {
            const localVarAxiosArgs = await StrategyApiAxiosParamCreator(configuration).postStrategyCreateStrategyAdmin(strategyIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Strategy details
         * @param {StrategyDetailsIn} strategyDetailsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStrategyDetailStrategy(strategyDetailsIn, options) {
            const localVarAxiosArgs = await StrategyApiAxiosParamCreator(configuration).postStrategyDetailStrategy(strategyDetailsIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get list of strategies by Customers. Admin tasks. Can see all strategies
         * @param {StrategyListCustomerIn} strategyListCustomerIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postStrategyListStrategyByCustomer(strategyListCustomerIn, options) {
            const localVarAxiosArgs = await StrategyApiAxiosParamCreator(configuration).postStrategyListStrategyByCustomer(strategyListCustomerIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * StrategyApi - factory interface
 * @export
 */
export const StrategyApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Get list of strategies.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyListStrategy(options) {
            return StrategyApiFp(configuration).getStrategyListStrategy(options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of strategy symbols
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyListSymbols(options) {
            return StrategyApiFp(configuration).getStrategyListSymbols(options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of time frames
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getStrategyListTimeframe(options) {
            return StrategyApiFp(configuration).getStrategyListTimeframe(options).then((request) => request(axios, basePath));
        },
        /**
         * Create a strategy. Define the name, must be unique. Add a description and the the url of the image
         * @param {StrategyIn} strategyIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStrategyCreateStrategyAdmin(strategyIn, options) {
            return StrategyApiFp(configuration).postStrategyCreateStrategyAdmin(strategyIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Strategy details
         * @param {StrategyDetailsIn} strategyDetailsIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStrategyDetailStrategy(strategyDetailsIn, options) {
            return StrategyApiFp(configuration).postStrategyDetailStrategy(strategyDetailsIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Get list of strategies by Customers. Admin tasks. Can see all strategies
         * @param {StrategyListCustomerIn} strategyListCustomerIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postStrategyListStrategyByCustomer(strategyListCustomerIn, options) {
            return StrategyApiFp(configuration).postStrategyListStrategyByCustomer(strategyListCustomerIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * StrategyApi - object-oriented interface
 * @export
 * @class StrategyApi
 * @extends {BaseAPI}
 */
export class StrategyApi extends BaseAPI {
    /**
     * Get list of strategies.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    getStrategyListStrategy(options) {
        return StrategyApiFp(this.configuration).getStrategyListStrategy(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of strategy symbols
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    getStrategyListSymbols(options) {
        return StrategyApiFp(this.configuration).getStrategyListSymbols(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of time frames
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    getStrategyListTimeframe(options) {
        return StrategyApiFp(this.configuration).getStrategyListTimeframe(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Create a strategy. Define the name, must be unique. Add a description and the the url of the image
     * @param {StrategyIn} strategyIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    postStrategyCreateStrategyAdmin(strategyIn, options) {
        return StrategyApiFp(this.configuration).postStrategyCreateStrategyAdmin(strategyIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Strategy details
     * @param {StrategyDetailsIn} strategyDetailsIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    postStrategyDetailStrategy(strategyDetailsIn, options) {
        return StrategyApiFp(this.configuration).postStrategyDetailStrategy(strategyDetailsIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get list of strategies by Customers. Admin tasks. Can see all strategies
     * @param {StrategyListCustomerIn} strategyListCustomerIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StrategyApi
     */
    postStrategyListStrategyByCustomer(strategyListCustomerIn, options) {
        return StrategyApiFp(this.configuration).postStrategyListStrategyByCustomer(strategyListCustomerIn, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * SubscriptionApi - axios parameter creator
 * @export
 */
export const SubscriptionApiAxiosParamCreator = function (configuration) {
    return {
        /**
         * Delete all subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionDeleteAllSubscriptions: async (options = {}) => {
            const localVarPath = `/subscription/delete_all_subscriptions`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Get subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionListSubscription: async (options = {}) => {
            const localVarPath = `/subscription/list_subscription`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscription to a strategy by Customers.
         * @param {StrategySubscriptionCustomerIn} strategySubscriptionCustomerIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionCreateSubscription: async (strategySubscriptionCustomerIn, options = {}) => {
            // verify required parameter 'strategySubscriptionCustomerIn' is not null or undefined
            if (strategySubscriptionCustomerIn === null || strategySubscriptionCustomerIn === undefined) {
                throw new RequiredError('strategySubscriptionCustomerIn', 'Required parameter strategySubscriptionCustomerIn was null or undefined when calling postSubscriptionCreateSubscription.');
            }
            const localVarPath = `/subscription/create_subscription`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof strategySubscriptionCustomerIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(strategySubscriptionCustomerIn !== undefined ? strategySubscriptionCustomerIn : {}) : (strategySubscriptionCustomerIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Subscription to a strategy by Customers. Admin can subscribe a user to a strategy
         * @param {StrategySubscriptionAdminIn} strategySubscriptionAdminIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionCreateSubscriptionByadmin: async (strategySubscriptionAdminIn, options = {}) => {
            // verify required parameter 'strategySubscriptionAdminIn' is not null or undefined
            if (strategySubscriptionAdminIn === null || strategySubscriptionAdminIn === undefined) {
                throw new RequiredError('strategySubscriptionAdminIn', 'Required parameter strategySubscriptionAdminIn was null or undefined when calling postSubscriptionCreateSubscriptionByadmin.');
            }
            const localVarPath = `/subscription/create_subscription_byadmin`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof strategySubscriptionAdminIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(strategySubscriptionAdminIn !== undefined ? strategySubscriptionAdminIn : {}) : (strategySubscriptionAdminIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a subscription
         * @param {DeleteSubscriptionIn} deleteSubscriptionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionDeleteOneSubscription: async (deleteSubscriptionIn, options = {}) => {
            // verify required parameter 'deleteSubscriptionIn' is not null or undefined
            if (deleteSubscriptionIn === null || deleteSubscriptionIn === undefined) {
                throw new RequiredError('deleteSubscriptionIn', 'Required parameter deleteSubscriptionIn was null or undefined when calling postSubscriptionDeleteOneSubscription.');
            }
            const localVarPath = `/subscription/delete_one_subscription`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof deleteSubscriptionIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(deleteSubscriptionIn !== undefined ? deleteSubscriptionIn : {}) : (deleteSubscriptionIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Update a subscription
         * @param {UpdateSubscriptionIn} updateSubscriptionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionUpdateSubscription: async (updateSubscriptionIn, options = {}) => {
            // verify required parameter 'updateSubscriptionIn' is not null or undefined
            if (updateSubscriptionIn === null || updateSubscriptionIn === undefined) {
                throw new RequiredError('updateSubscriptionIn', 'Required parameter updateSubscriptionIn was null or undefined when calling postSubscriptionUpdateSubscription.');
            }
            const localVarPath = `/subscription/update_subscription`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof updateSubscriptionIn !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateSubscriptionIn !== undefined ? updateSubscriptionIn : {}) : (updateSubscriptionIn || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * SubscriptionApi - functional programming interface
 * @export
 */
export const SubscriptionApiFp = function (configuration) {
    return {
        /**
         * Delete all subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionDeleteAllSubscriptions(options) {
            const localVarAxiosArgs = await SubscriptionApiAxiosParamCreator(configuration).getSubscriptionDeleteAllSubscriptions(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getSubscriptionListSubscription(options) {
            const localVarAxiosArgs = await SubscriptionApiAxiosParamCreator(configuration).getSubscriptionListSubscription(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Subscription to a strategy by Customers.
         * @param {StrategySubscriptionCustomerIn} strategySubscriptionCustomerIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubscriptionCreateSubscription(strategySubscriptionCustomerIn, options) {
            const localVarAxiosArgs = await SubscriptionApiAxiosParamCreator(configuration).postSubscriptionCreateSubscription(strategySubscriptionCustomerIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Subscription to a strategy by Customers. Admin can subscribe a user to a strategy
         * @param {StrategySubscriptionAdminIn} strategySubscriptionAdminIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubscriptionCreateSubscriptionByadmin(strategySubscriptionAdminIn, options) {
            const localVarAxiosArgs = await SubscriptionApiAxiosParamCreator(configuration).postSubscriptionCreateSubscriptionByadmin(strategySubscriptionAdminIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a subscription
         * @param {DeleteSubscriptionIn} deleteSubscriptionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubscriptionDeleteOneSubscription(deleteSubscriptionIn, options) {
            const localVarAxiosArgs = await SubscriptionApiAxiosParamCreator(configuration).postSubscriptionDeleteOneSubscription(deleteSubscriptionIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update a subscription
         * @param {UpdateSubscriptionIn} updateSubscriptionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postSubscriptionUpdateSubscription(updateSubscriptionIn, options) {
            const localVarAxiosArgs = await SubscriptionApiAxiosParamCreator(configuration).postSubscriptionUpdateSubscription(updateSubscriptionIn, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * SubscriptionApi - factory interface
 * @export
 */
export const SubscriptionApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         * Delete all subscriptions
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionDeleteAllSubscriptions(options) {
            return SubscriptionApiFp(configuration).getSubscriptionDeleteAllSubscriptions(options).then((request) => request(axios, basePath));
        },
        /**
         * Get subscription
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getSubscriptionListSubscription(options) {
            return SubscriptionApiFp(configuration).getSubscriptionListSubscription(options).then((request) => request(axios, basePath));
        },
        /**
         * Subscription to a strategy by Customers.
         * @param {StrategySubscriptionCustomerIn} strategySubscriptionCustomerIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionCreateSubscription(strategySubscriptionCustomerIn, options) {
            return SubscriptionApiFp(configuration).postSubscriptionCreateSubscription(strategySubscriptionCustomerIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Subscription to a strategy by Customers. Admin can subscribe a user to a strategy
         * @param {StrategySubscriptionAdminIn} strategySubscriptionAdminIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionCreateSubscriptionByadmin(strategySubscriptionAdminIn, options) {
            return SubscriptionApiFp(configuration).postSubscriptionCreateSubscriptionByadmin(strategySubscriptionAdminIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a subscription
         * @param {DeleteSubscriptionIn} deleteSubscriptionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionDeleteOneSubscription(deleteSubscriptionIn, options) {
            return SubscriptionApiFp(configuration).postSubscriptionDeleteOneSubscription(deleteSubscriptionIn, options).then((request) => request(axios, basePath));
        },
        /**
         * Update a subscription
         * @param {UpdateSubscriptionIn} updateSubscriptionIn
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postSubscriptionUpdateSubscription(updateSubscriptionIn, options) {
            return SubscriptionApiFp(configuration).postSubscriptionUpdateSubscription(updateSubscriptionIn, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * SubscriptionApi - object-oriented interface
 * @export
 * @class SubscriptionApi
 * @extends {BaseAPI}
 */
export class SubscriptionApi extends BaseAPI {
    /**
     * Delete all subscriptions
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionDeleteAllSubscriptions(options) {
        return SubscriptionApiFp(this.configuration).getSubscriptionDeleteAllSubscriptions(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get subscription
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    getSubscriptionListSubscription(options) {
        return SubscriptionApiFp(this.configuration).getSubscriptionListSubscription(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Subscription to a strategy by Customers.
     * @param {StrategySubscriptionCustomerIn} strategySubscriptionCustomerIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    postSubscriptionCreateSubscription(strategySubscriptionCustomerIn, options) {
        return SubscriptionApiFp(this.configuration).postSubscriptionCreateSubscription(strategySubscriptionCustomerIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Subscription to a strategy by Customers. Admin can subscribe a user to a strategy
     * @param {StrategySubscriptionAdminIn} strategySubscriptionAdminIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    postSubscriptionCreateSubscriptionByadmin(strategySubscriptionAdminIn, options) {
        return SubscriptionApiFp(this.configuration).postSubscriptionCreateSubscriptionByadmin(strategySubscriptionAdminIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a subscription
     * @param {DeleteSubscriptionIn} deleteSubscriptionIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    postSubscriptionDeleteOneSubscription(deleteSubscriptionIn, options) {
        return SubscriptionApiFp(this.configuration).postSubscriptionDeleteOneSubscription(deleteSubscriptionIn, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update a subscription
     * @param {UpdateSubscriptionIn} updateSubscriptionIn
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubscriptionApi
     */
    postSubscriptionUpdateSubscription(updateSubscriptionIn, options) {
        return SubscriptionApiFp(this.configuration).postSubscriptionUpdateSubscription(updateSubscriptionIn, options).then((request) => request(this.axios, this.basePath));
    }
}
/**
 * UserApi - axios parameter creator
 * @export
 */
export const UserApiAxiosParamCreator = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser: async (options = {}) => {
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {UpdateUserIN} updateUserIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser: async (updateUserIN, options = {}) => {
            // verify required parameter 'updateUserIN' is not null or undefined
            if (updateUserIN === null || updateUserIN === undefined) {
                throw new RequiredError('updateUserIN', 'Required parameter updateUserIN was null or undefined when calling postUser.');
            }
            const localVarPath = `/user`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof updateUserIN !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(updateUserIN !== undefined ? updateUserIN : {}) : (updateUserIN || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {ChangePasswordIN} changePasswordIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserChangepassword: async (changePasswordIN, options = {}) => {
            // verify required parameter 'changePasswordIN' is not null or undefined
            if (changePasswordIN === null || changePasswordIN === undefined) {
                throw new RequiredError('changePasswordIN', 'Required parameter changePasswordIN was null or undefined when calling postUserChangepassword.');
            }
            const localVarPath = `/user/changepassword`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            // authentication httpAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof changePasswordIN !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(changePasswordIN !== undefined ? changePasswordIN : {}) : (changePasswordIN || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {LoginIN} loginIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserLogin: async (loginIN, options = {}) => {
            // verify required parameter 'loginIN' is not null or undefined
            if (loginIN === null || loginIN === undefined) {
                throw new RequiredError('loginIN', 'Required parameter loginIN was null or undefined when calling postUserLogin.');
            }
            const localVarPath = `/user/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof loginIN !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(loginIN !== undefined ? loginIN : {}) : (loginIN || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         *
         * @param {RegisterIN} registerIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserRegister: async (registerIN, options = {}) => {
            // verify required parameter 'registerIN' is not null or undefined
            if (registerIN === null || registerIN === undefined) {
                throw new RequiredError('registerIN', 'Required parameter registerIN was null or undefined when calling postUserRegister.');
            }
            const localVarPath = `/user/register`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options };
            const localVarHeaderParameter = {};
            const localVarQueryParameter = {};
            localVarHeaderParameter['Content-Type'] = 'application/json';
            localVarUrlObj.query = { ...localVarUrlObj.query, ...localVarQueryParameter, ...options.query };
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = { ...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers };
            const needsSerialization = (typeof registerIN !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data = needsSerialization ? JSON.stringify(registerIN !== undefined ? registerIN : {}) : (registerIN || "");
            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    };
};
/**
 * UserApi - functional programming interface
 * @export
 */
export const UserApiFp = function (configuration) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUser(options) {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).getUser(options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {UpdateUserIN} updateUserIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUser(updateUserIN, options) {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).postUser(updateUserIN, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {ChangePasswordIN} changePasswordIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserChangepassword(changePasswordIN, options) {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).postUserChangepassword(changePasswordIN, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {LoginIN} loginIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserLogin(loginIN, options) {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).postUserLogin(loginIN, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *
         * @param {RegisterIN} registerIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postUserRegister(registerIN, options) {
            const localVarAxiosArgs = await UserApiAxiosParamCreator(configuration).postUserRegister(registerIN, options);
            return (axios = globalAxios, basePath = BASE_PATH) => {
                const axiosRequestArgs = { ...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url };
                return axios.request(axiosRequestArgs);
            };
        },
    };
};
/**
 * UserApi - factory interface
 * @export
 */
export const UserApiFactory = function (configuration, basePath, axios) {
    return {
        /**
         *
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUser(options) {
            return UserApiFp(configuration).getUser(options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {UpdateUserIN} updateUserIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUser(updateUserIN, options) {
            return UserApiFp(configuration).postUser(updateUserIN, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {ChangePasswordIN} changePasswordIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserChangepassword(changePasswordIN, options) {
            return UserApiFp(configuration).postUserChangepassword(changePasswordIN, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {LoginIN} loginIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserLogin(loginIN, options) {
            return UserApiFp(configuration).postUserLogin(loginIN, options).then((request) => request(axios, basePath));
        },
        /**
         *
         * @param {RegisterIN} registerIN
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postUserRegister(registerIN, options) {
            return UserApiFp(configuration).postUserRegister(registerIN, options).then((request) => request(axios, basePath));
        },
    };
};
/**
 * UserApi - object-oriented interface
 * @export
 * @class UserApi
 * @extends {BaseAPI}
 */
export class UserApi extends BaseAPI {
    /**
     *
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    getUser(options) {
        return UserApiFp(this.configuration).getUser(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {UpdateUserIN} updateUserIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postUser(updateUserIN, options) {
        return UserApiFp(this.configuration).postUser(updateUserIN, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {ChangePasswordIN} changePasswordIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postUserChangepassword(changePasswordIN, options) {
        return UserApiFp(this.configuration).postUserChangepassword(changePasswordIN, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {LoginIN} loginIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postUserLogin(loginIN, options) {
        return UserApiFp(this.configuration).postUserLogin(loginIN, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *
     * @param {RegisterIN} registerIN
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserApi
     */
    postUserRegister(registerIN, options) {
        return UserApiFp(this.configuration).postUserRegister(registerIN, options).then((request) => request(this.axios, this.basePath));
    }
}
//# sourceMappingURL=api.js.map